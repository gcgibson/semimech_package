library(stringr)
extract_waves <- function(hhs,last_date){

  hhs <- hhs[hhs$date > "2021-02-01",]
  hhs <- hhs[hhs$date <= last_date,]
  wave_mat <- matrix(NA,nrow=10000,ncol=1000)

  wave_mat_idx <- 1
  for (state in unique(hhs$state)){
    tmp <- hhs[hhs$state == state,]$covid_per_cap
    tmp_lowess_diff <- diff(lowess(tmp,f=.1)$y)
    wave_starts <- c(0)
    for (t in 2:length(tmp_lowess_diff)){
      if(tmp_lowess_diff[t-1] < 0 & tmp_lowess_diff[t] >0){
        tmptmp <- tmp[tail(wave_starts,1):t]
        wave_mat[wave_mat_idx,1:length(tmptmp)] <-tmptmp
        wave_mat_idx <- wave_mat_idx +1
        wave_starts <- c(wave_starts,t)

      }
    }
  }
  first_non_na <-which(is.na(wave_mat[,1]))[1]

  return (wave_mat[1:first_non_na,])
}


quantiles <- c(0.01, 0.025, seq(0.05, 0.95, by = 0.05), 0.975, 0.99)
weights_mat <- matrix(NA, nrow=1000000,ncol=2)
weights_mat_idx <- 1
date_sequence <- seq(as.Date("2021-07-12"),as.Date("2021-07-12")+7*50,by="week")
for (date_idx in 1:length(date_sequence)){
  last_date <- date_sequence[date_idx]


  source("R/get_hhs.R")
  hhs <- get_hhs()  ### to replaced with however you want to get the data
  wave_mat <- extract_waves(hhs,last_date)
  hhs_sub <- hhs %>%
    dplyr::select(state, date, fips:previous_day_admission_adult_covid_confirmed)
  hhs_sub <- hhs_sub %>% dplyr::select(state,date,previous_day_admission_adult_covid_confirmed)
  hhs_sub$covid <- hhs_sub$previous_day_admission_adult_covid_confirmed
  hhs_sub <- hhs_sub %>% dplyr::select(state,date,covid)

  hhs_sub <- hhs_sub[hhs_sub$date <= last_date,]
  hhs_sub <- hhs_sub[hhs_sub$date > "2021-02-01",]


  df_to_submit_list <- list()
  library(gam)
  for (state in unique(hhs_sub$state)){
    print (state)
    uspop <- read.csv("data/uspop.csv")
    local_pop <-uspop[uspop$location== state.name[which(state.abb == state )],]$Pop_Est_2019
    hhs_sub_sub <- hhs_sub[hhs_sub$state == state,]

    hhs_sub_sub_tmp <- hhs_sub_sub$covid

    ### wave mat stuff
    wave_starts <- c(0)
    hhs_sub_sub_tmp <- hhs_sub_sub$covid
    hhs_sub_sub_tmp_diff_lowess <- diff(lowess(hhs_sub_sub_tmp,f=.1)$y)
    for (t in 2:length(hhs_sub_sub_tmp_diff_lowess)){
      if (hhs_sub_sub_tmp_diff_lowess[t-1] <0 & hhs_sub_sub_tmp_diff_lowess[t]>0){
        wave_starts <- c(wave_starts,t)
      }
    }
    diff_l <- length(hhs_sub_sub_tmp) - tail(wave_starts,1)
    if (diff_l > 30){
      hhs_sub_sub_tmp_train <- hhs_sub_sub_tmp[tail(wave_starts,1):length(hhs_sub_sub_tmp)]

    } else{
      hhs_sub_sub_tmp_train <- hhs_sub_sub_tmp[(length(hhs_sub_sub_tmp)-30):length(hhs_sub_sub_tmp)]
    }

    wave_mat_test <- wave_mat[,1:(length(hhs_sub_sub_tmp_train)+30)]
    wave_mat_test <-wave_mat_test[complete.cases(wave_mat_test),]
    if (is.null(dim(wave_mat_test))){
      wave_mat_test <- matrix(wave_mat_test,nrow=1)
    }
    wave_mat_test <- t(wave_mat_test)
    wave_mat_train <- wave_mat_test[1:length(hhs_sub_sub_tmp_train),]


    ###GAM stuff
    fit_spline <- gam(covid ~ s(t,df=5)  ,data=data.frame(covid=hhs_sub_sub_tmp_train,
                                                  t= 1:length(hhs_sub_sub_tmp_train),
                                                  wave_mat=wave_mat_train))

    blorp <- data.frame(t=1:(length(hhs_sub_sub_tmp_train) +30),
                        wave_mat = wave_mat_test)#,
    #  wave_mat = wave_mat_test)
    preds_spline <- predict(fit_spline,newdata = blorp,se.fit = T)
    preds_spline<- preds_spline[(length(preds_spline)-29):length(preds_spline)]

    if (!is.null(dim(wave_mat_train))){
      if (dim(wave_mat_train)[2] > 3){
        fit_historical <- cv.glmnet(y = hhs_sub_sub_tmp_train,x=wave_mat_train)
        mse_historical <- sum((hhs_sub_sub_tmp_train-predict(fit_historical,newx=wave_mat_train))**2)

        preds_historical <- predict(fit_historical,newx = wave_mat_test)
        preds_historical<- preds_historical[(length(preds_historical)-29):length(preds_historical)]
        weights <- c(sum(fit_spline$residuals**2),mse_historical)
        weights  <- weights/sum(weights)
      } else{
        weights <- c(1,1e-10)
        preds_historical <- rep(0,30)
      }
    } else{
      weights <- c(1,1e-10)
      preds_historical <- rep(0,30)
    }

    weights_mat[weights_mat_idx,] <- weights
    weights_mat_idx <- weights_mat_idx + 1
    ###combine

    previous_diffs <- sd(diff(hhs_sub_sub_tmp))
    #### KCDE style differences
    wave_mat_sds <- rep(0,30)
    diff_by_horzizon <-rep(0,30)
    for (h in 1:30){
      diff_by_horzizon[h] <- sd(diff(hhs_sub_sub_tmp,lag=h))
      wave_mat_diffs <- apply(wave_mat,2,function(x){
          return (diff(x,lag=h,na.rm=T))
      })

      wave_mat_sds[h] <- sd(wave_mat_diffs*local_pop/1e5,na.rm = T)
    }

    preds_mat <- matrix(nrow=1000,ncol=30)
    for (row_idx in 1:1000){

      mean_done <- weights[1]*preds_spline + weights[2]*preds_historical
      preds_mat[row_idx,] <- rpois(length(mean_done),mean_done) + rnorm(length(mean_done),0,sd=diff_by_horzizon)
    }

    preds_mat <- apply(preds_mat,2,function(x){pmax(0,x)})
    plot(1:length(hhs_sub_sub_tmp_train),hhs_sub_sub_tmp_train,type='l',xlim=c(0,length(hhs_sub_sub_tmp_train)+29))
    lines((length(hhs_sub_sub_tmp_train)):(length(hhs_sub_sub_tmp_train)+29),colMeans(preds_mat),col='red')
    lines((length(hhs_sub_sub_tmp_train)):(length(hhs_sub_sub_tmp_train)+29),apply(preds_mat,2,function(x){quantile(x,probs=.05,na.rm = T)}),col='red')
    lines((length(hhs_sub_sub_tmp_train)):(length(hhs_sub_sub_tmp_train)+29),apply(preds_mat,2,function(x){quantile(x,probs=.95,na.rm=T)}),col='red')


    ###df

    ncol_preds <- ncol(preds_mat)

    df_to_submit <- data.frame(location = rep(state,30*23),forecast_date = rep(last_date,30*23))



    horizon_quantile_mat <- matrix(NA,nrow=length(quantiles),ncol=30)

    for (h in 1:30){
      q_idx <- 1
      for (quant_lvl in quantiles){
        horizon_quantile_mat[q_idx,h] <- quantile(preds_mat[,h],probs=quant_lvl,na.rm = T)
        q_idx <- q_idx + 1
      }

    }
    df_to_submit$value <- c(horizon_quantile_mat)
    df_to_submit$type <- "quantile"
    df_to_submit$target_end_date <-rep(last_date + 1:30,each=23)
    df_to_submit$quantile <- rep(quantiles,30)
    df_to_submit$target <-rep(paste(1:30,"day ahead inc hosp") ,each=23)

    df_to_submit_list[[state]] <-df_to_submit
  }
  df_to_submit <-do.call(rbind.data.frame, df_to_submit_list)

  fips <- read_csv("data/fips-codes.csv")
  colnames(fips) <- c("fips", "state_full", "state", "alphacount")
  glimpse(fips)
  library(stringr)
  fips <- fips %>%
    mutate(fips = str_pad(fips, 2, pad = "0"))
  fips$location <- fips$state
  df_to_submit <- df_to_submit %>% left_join(fips,by="location")
  df_to_submit$location <- df_to_submit$fips
  df_to_submit <- df_to_submit %>% dplyr::select(target,location,forecast_date,target_end_date,quantile,value,type)
  write.csv(file = paste0(last_date,"-UT-foot.csv"),x=df_to_submit)
}


library(ggplot2)
ggplot(data=data.frame(x=weights_mat[,1])) + geom_histogram(aes(x=x,fill='Current'))  +
  geom_histogram(data=data.frame(x=weights_mat[,2]),aes(x=x,fill='Hisotrical')) + theme_classic()

